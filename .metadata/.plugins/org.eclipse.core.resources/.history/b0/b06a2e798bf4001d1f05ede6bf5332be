/***********************************************************************************************************************
 *
 * Module : Ultrasonic ranging module : HC-SR04
 *
 * File name: ultrasonic.c
 *
 * Description: Source file for Ultrasonic ranging module : HC-SR04
 *
 * Author: Sarah
 *********************************************************************************************************************/

#include"icu.h"
#include"ultrasonic.h"
#include"gpio.h"
#include"std_types.h"
#include<util/delay.h>

uint16 Distance = 0;
uint16 TIMER_value = 0 ;
uint8 g_edgeCount = 0;
/*
  Description:
  Initialize the ICU driver as required.
  Setup the ICU call back function.
  Setup the direction for the trigger pin as output pin through the GPIO driver.
 */

void Ultrasonic_init(void){

	ICU_ConfigType ICU_Configuration = {F_CPU_8,RAISING};
	ICU_init(&ICU_Configuration);
	ICU_setCallBack(Ultrasonic_edgeProcessing);

	/*Set Trigger pin output pin*/
	GPIO_setupPinDirection(TRIGGER_PIN_PORT,TRIGGER_PIN_NUM,PIN_OUTPUT);

	/*Set Echo Pin as input pin*/
	GPIO_setupPinDirection(ECHO_PIN_PORT,ECHO_PIN_NUM,PIN_INPUT);

}

/*Send the Trigger pulse to the ultrasonic.*/

void Ultrasonic_Trigger(void){

	GPIO_writePin(TRIGGER_PIN_PORT,TRIGGER_PIN_NUM,LOGIC_HIGH);
	_delay_us(10);
	GPIO_writePin(TRIGGER_PIN_PORT,TRIGGER_PIN_NUM,LOGIC_LOW);

}

/*Description:
  Send the trigger pulse by using Ultrasonic_Trigger function.
  Start the measurements by the ICU from this moment.
  Return: The measured distance in Centimeter.
 */
uint16 Ultrasonic_readDistance(void){

	Ultrasonic_Trigger();
	ICU_setEdgeDetectionType(RAISING);

	Distance = (TIMER_value) / 58.8 ;

	return Distance;
}

/*Description:
  This is the call back function called by the ICU driver.
  This is used to calculate the high time (pulse time) generated by
the ultrasonic sensor*/

void Ultrasonic_edgeProcessing(void){

	g_edgeCount++;
	if(g_edgeCount == 1)
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
	}
	else if(g_edgeCount == 2)
	{
		/* Store the High time value */
		TIMER_value = ICU_getInputCaptureValue();

	}
}
